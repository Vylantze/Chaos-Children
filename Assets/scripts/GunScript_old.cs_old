using UnityEngine;
using System.Collections;

public class GunScript_old : MonoBehaviour {
	PlayerController pc;
	// bullet stuff
	public Rigidbody2D bullet;
	public float bullet_speed = 30f;
	public Transform firingLocation;
	bool firingDone = true;
	private int numShots = 0;
	public int totalShotsAllowed = 3;
	
	// Interval timer (between every totalShots
	public int waitTime = 20;
	private int timer = 0;
	// time between each individual shot
	public int shotWait = 5;
	private int shotWaitTimer = 0;
	// which mode is it in?
	public bool shipMode = false;
	
	// charge mode
	Rigidbody2D chargedShot;
	CircleCollider2D chargedCollider;
	private int chargeLevel = 0;
	public int totalCharge = 3; // maximum 3 charges
	public int chargeTime = 20; 	// charging times before max - *3 of charge time to get max charge
	private int chargeTimer = 0;
	
	// rapid fire mode
	public bool rf_c = true; // rapid fire or charge mode
	// true is rapid fire
	// false is charge
	
	// Use this for initialization
	void Start () {
		pc = GetComponentInParent<PlayerController> ();
	}
	
	// Update is called once per frame
	void Update () {
		// ATTACK
		// for rapid fire very easy
		if (rf_c && Input.GetButton ("FireBullet")) {
			fire ();
		} else if (firingDone&&Input.GetButtonDown ("FireBullet")) {
			fire();
			chargeTimer = 0;
		}
		
		if (!rf_c) { // if charge mode
			chargedUpdates();
		}
		
		if (shotWaitTimer < shotWait) {
			shotWaitTimer++;
		}
	}
	
	void chargedUpdates() {
		
		if (Input.GetButton ("FireBullet")) { // if charge mode and holding fire button
			chargeTimer++;
			if (chargeTimer>=chargeTime) { // if charged for a certain time
				charge();
				chargeTimer = 0;
			}
			if (chargeLevel>0) {
				chargedShot.transform.position = pc.transform.position;
			}
		}
		
		if (Input.GetButtonUp ("FireBullet")&&chargedShot!=null) {
			chargedCollider.enabled = true;
			if (shipMode) {
				chargedShot.velocity = new Vector2 (0f, bullet_speed);
			}
			else if (pc.facingRight) {
				chargedShot.velocity = new Vector2 (bullet_speed, 0f);
			} else {
				chargedShot.velocity = new Vector2 (-bullet_speed, 0f);
			}
			chargeLevel = 0;
			chargedShot = null;
		}
		
		limitFire ();
	}
	
	void charge() {
		numShots = 0;
		if (chargedShot==null) {
			chargedShot = Instantiate (bullet, pc.transform.position, Quaternion.identity) as Rigidbody2D;
			chargedShot.gameObject.SetActive(true);
			chargedCollider = chargedShot.GetComponent<CircleCollider2D>();
			chargedCollider.enabled = false;// disable the collider first
		} else if (chargeLevel<=totalCharge) {
			Vector3 size = chargedShot.transform.localScale;
			chargedShot.transform.localScale = new Vector3(size.x*1.5f, size.y*1.5f, 1f);
		}
		chargeLevel++;
	}
	
	void fire() {
		if (!rf_c) {
			numShots++;
		}
		if (shotWaitTimer >= shotWait) { // if wait time expired
			shotWaitTimer = 0;
			Rigidbody2D bulletInstance = Instantiate (bullet, firingLocation.position, Quaternion.identity) as Rigidbody2D;
			bulletInstance.gameObject.SetActive (true);
			
			if (shipMode) {
				bulletInstance.velocity = new Vector2 (0f, bullet_speed);
			}
			else if (pc.facingRight) {
				bulletInstance.velocity = new Vector2 (bullet_speed, 0f);
			} else {
				bulletInstance.velocity = new Vector2 (-bullet_speed, 0f);
			}
		}
	}
	
	void limitFire() {
		if (numShots >= totalShotsAllowed) {
			firingDone = false;
			numShots = 0;
		}
		
		if (!firingDone) {
			timer++;
			if (timer>=waitTime) {
				firingDone = true;
				timer=0;
			}
		}
	}
}
